"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var deployment_exports = {};
__export(deployment_exports, {
  CONVEX_DEPLOYMENT_VAR_NAME: () => CONVEX_DEPLOYMENT_VAR_NAME,
  changesToEnvVarFile: () => changesToEnvVarFile,
  changesToGitIgnore: () => changesToGitIgnore,
  deploymentNameFromAdminKey: () => deploymentNameFromAdminKey,
  deploymentNameFromAdminKeyOrCrash: () => deploymentNameFromAdminKeyOrCrash,
  deploymentTypeFromAdminKey: () => deploymentTypeFromAdminKey,
  eraseDeploymentEnvVar: () => eraseDeploymentEnvVar,
  readDeploymentEnvVar: () => readDeploymentEnvVar,
  stripDeploymentTypePrefix: () => stripDeploymentTypePrefix,
  writeDeploymentEnvVar: () => writeDeploymentEnvVar
});
module.exports = __toCommonJS(deployment_exports);
var dotenv = __toESM(require("dotenv"), 1);
var import_context = require("../../bundler/context.js");
var import_envvars = require("./envvars.js");
var import_utils = require("./utils.js");
const ENV_VAR_FILE_PATH = ".env.local";
const CONVEX_DEPLOYMENT_VAR_NAME = "CONVEX_DEPLOYMENT";
function readDeploymentEnvVar() {
  dotenv.config({ path: ENV_VAR_FILE_PATH });
  dotenv.config();
  const rawAdminKey = process.env[import_utils.CONVEX_DEPLOY_KEY_ENV_VAR_NAME] ?? null;
  const adminKeyDeploymentName = rawAdminKey ? deploymentNameFromAdminKey(rawAdminKey) : null;
  if (adminKeyDeploymentName !== null) {
    return adminKeyDeploymentName;
  }
  const raw = process.env[CONVEX_DEPLOYMENT_VAR_NAME] ?? null;
  if (raw === null || raw === "") {
    return null;
  }
  return stripDeploymentTypePrefix(raw);
}
function stripDeploymentTypePrefix(deployment) {
  return deployment.split(":").at(-1);
}
async function writeDeploymentEnvVar(ctx, deploymentType, deployment) {
  const existingFile = ctx.fs.exists(ENV_VAR_FILE_PATH) ? ctx.fs.readUtf8File(ENV_VAR_FILE_PATH) : null;
  const changedFile = changesToEnvVarFile(
    existingFile,
    deploymentType,
    deployment
  );
  process.env[CONVEX_DEPLOYMENT_VAR_NAME] = deploymentType + ":" + deployment.deploymentName;
  if (changedFile !== null) {
    ctx.fs.writeUtf8File(ENV_VAR_FILE_PATH, changedFile);
    return { wroteToGitIgnore: await gitIgnoreEnvVarFile(ctx) };
  }
  return { wroteToGitIgnore: false };
}
async function eraseDeploymentEnvVar(ctx) {
  const existingFile = ctx.fs.exists(ENV_VAR_FILE_PATH) ? ctx.fs.readUtf8File(ENV_VAR_FILE_PATH) : null;
  if (existingFile === null) {
    return false;
  }
  const config = dotenv.parse(existingFile);
  const existing = config[CONVEX_DEPLOYMENT_VAR_NAME];
  if (existing === void 0) {
    return false;
  }
  const changedFile = existingFile.replace(
    (0, import_envvars.getEnvVarRegex)(CONVEX_DEPLOYMENT_VAR_NAME),
    ""
  );
  ctx.fs.writeUtf8File(ENV_VAR_FILE_PATH, changedFile);
  return true;
}
async function gitIgnoreEnvVarFile(ctx) {
  const gitIgnorePath = ".gitignore";
  const gitIgnoreContents = ctx.fs.exists(gitIgnorePath) ? ctx.fs.readUtf8File(gitIgnorePath) : "";
  const changedGitIgnore = changesToGitIgnore(gitIgnoreContents);
  if (changedGitIgnore !== null) {
    ctx.fs.writeUtf8File(gitIgnorePath, changedGitIgnore);
    return true;
  }
  return false;
}
function changesToEnvVarFile(existingFile, deploymentType, {
  team,
  project,
  deploymentName
}) {
  const deploymentValue = deploymentType + ":" + deploymentName;
  const commentOnPreviousLine = "# Deployment used by `npx convex dev`";
  const commentAfterValue = `team: ${team}, project: ${project}`;
  return (0, import_envvars.changedEnvVarFile)(
    existingFile,
    CONVEX_DEPLOYMENT_VAR_NAME,
    deploymentValue,
    commentAfterValue,
    commentOnPreviousLine
  );
}
function changesToGitIgnore(existingFile) {
  if (existingFile === null) {
    return `${ENV_VAR_FILE_PATH}
`;
  }
  const gitIgnoreLines = existingFile.split("\n");
  const envVarFileIgnored = gitIgnoreLines.some(
    (line) => line === ".env.local" || line === ".env.*" || line === ".env*" || line === "*.local" || line === ".env*.local"
  );
  if (!envVarFileIgnored) {
    return `${existingFile}
${ENV_VAR_FILE_PATH}
`;
  } else {
    return null;
  }
}
const deploymentNameFromAdminKeyOrCrash = async (ctx, adminKey) => {
  const deploymentName = deploymentNameFromAdminKey(adminKey);
  if (deploymentName === null) {
    (0, import_context.logFailure)(
      ctx,
      `Please set ${import_utils.CONVEX_DEPLOY_KEY_ENV_VAR_NAME} to a new key which you can find on your Convex dashboard.`
    );
    return await ctx.crash(1);
  }
  return deploymentName;
};
const deploymentNameFromAdminKey = (adminKey) => {
  const parts = adminKey.split("|");
  if (parts.length === 1) {
    return null;
  }
  if (deploymentTypeFromAdminKey(adminKey) !== "prod") {
    return null;
  }
  return stripDeploymentTypePrefix(parts[0]);
};
function deploymentTypeFromAdminKey(adminKey) {
  const parts = adminKey.split(":");
  if (parts.length === 1) {
    return "prod";
  }
  return parts.at(0);
}
//# sourceMappingURL=deployment.js.map
