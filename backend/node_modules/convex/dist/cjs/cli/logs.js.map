{
  "version": 3,
  "sources": ["../../../src/cli/logs.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport { logMessage, oneoffContext } from \"../bundler/context.js\";\nimport { watchLogs } from \"./lib/logs.js\";\nimport {\n  deploymentSelectionFromOptions,\n  fetchDeploymentCredentialsProvisionProd,\n} from \"./lib/api.js\";\nimport { DeploymentCommand } from \"./lib/utils.js\";\nimport { InvalidArgumentError } from \"commander\";\n\nexport const logs = new DeploymentCommand(\"logs\")\n  .summary(\"Watch logs from your deployment\")\n  .description(\n    \"Stream function logs from your Convex deployment.\\nBy default, this streams from your project's dev deployment.\"\n  )\n  .option(\n    \"--history [n]\",\n    \"Show `n` most recent logs. Defaults to showing all available logs.\",\n    parseInteger\n  )\n  .addDeploymentSelectionOptions(\"Watch logs from\")\n  .showHelpAfterError()\n  .action(async (cmdOptions) => {\n    const ctx = oneoffContext;\n\n    const deploymentSelection = deploymentSelectionFromOptions(cmdOptions);\n    const credentials = await fetchDeploymentCredentialsProvisionProd(\n      ctx,\n      deploymentSelection\n    );\n    if (cmdOptions.prod) {\n      logMessage(\n        ctx,\n        chalk.yellow(\n          `Watching logs for production deployment ${\n            credentials.deploymentName || \"\"\n          }...`\n        )\n      );\n    } else {\n      logMessage(\n        ctx,\n        chalk.yellow(\n          `Watching logs for dev deployment ${\n            credentials.deploymentName || \"\"\n          }...`\n        )\n      );\n    }\n    await watchLogs(ctx, credentials.url, credentials.adminKey, \"stdout\", {\n      history: cmdOptions.history,\n    });\n  });\n\nfunction parseInteger(value: string) {\n  const parsedValue = +value;\n  if (isNaN(parsedValue)) {\n    // eslint-disable-next-line no-restricted-syntax\n    throw new InvalidArgumentError(\"Not a number.\");\n  }\n  return parsedValue;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,qBAA0C;AAC1C,kBAA0B;AAC1B,iBAGO;AACP,mBAAkC;AAClC,uBAAqC;AAE9B,MAAM,OAAO,IAAI,+BAAkB,MAAM,EAC7C,QAAQ,iCAAiC,EACzC;AAAA,EACC;AACF,EACC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AACF,EACC,8BAA8B,iBAAiB,EAC/C,mBAAmB,EACnB,OAAO,OAAO,eAAe;AAC5B,QAAM,MAAM;AAEZ,QAAM,0BAAsB,2CAA+B,UAAU;AACrE,QAAM,cAAc,UAAM;AAAA,IACxB;AAAA,IACA;AAAA,EACF;AACA,MAAI,WAAW,MAAM;AACnB;AAAA,MACE;AAAA,MACA,aAAAA,QAAM;AAAA,QACJ,2CACE,YAAY,kBAAkB;AAAA,MAElC;AAAA,IACF;AAAA,EACF,OAAO;AACL;AAAA,MACE;AAAA,MACA,aAAAA,QAAM;AAAA,QACJ,oCACE,YAAY,kBAAkB;AAAA,MAElC;AAAA,IACF;AAAA,EACF;AACA,YAAM,uBAAU,KAAK,YAAY,KAAK,YAAY,UAAU,UAAU;AAAA,IACpE,SAAS,WAAW;AAAA,EACtB,CAAC;AACH,CAAC;AAEH,SAAS,aAAa,OAAe;AACnC,QAAM,cAAc,CAAC;AACrB,MAAI,MAAM,WAAW,GAAG;AAEtB,UAAM,IAAI,sCAAqB,eAAe;AAAA,EAChD;AACA,SAAO;AACT;",
  "names": ["chalk"]
}
