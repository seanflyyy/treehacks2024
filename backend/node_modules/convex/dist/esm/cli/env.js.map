{
  "version": 3,
  "sources": ["../../../src/cli/env.ts"],
  "sourcesContent": ["import { Command } from \"commander\";\nimport { logFailure, logMessage, oneoffContext } from \"../bundler/context.js\";\nimport {\n  deploymentSelectionFromOptions,\n  DeploymentSelectionOptions,\n  fetchDeploymentCredentialsWithinCurrentProject,\n} from \"./lib/api.js\";\nimport {\n  DeploymentCommand,\n  deploymentClient,\n  ensureHasConvexDependency,\n} from \"./lib/utils.js\";\nimport { version } from \"./version.js\";\nimport chalk from \"chalk\";\nimport { runQuery } from \"./lib/run.js\";\n\nconst envSet = new Command(\"set\")\n  .arguments(\"<name> <value>\")\n  .configureHelp({ showGlobalOptions: true })\n  .action(async (name, value, _options, cmd) => {\n    const options = cmd.optsWithGlobals();\n    await ensureHasConvexDependency(oneoffContext, \"env set\");\n    await callUpdateEnvironmentVariables(options, [{ name, value }]);\n    logMessage(oneoffContext, chalk.green(`Successfully set ${name}=${value}`));\n  });\n\nconst envGet = new Command(\"get\")\n  .arguments(\"<name>\")\n  .configureHelp({ showGlobalOptions: true })\n  .action(async (envVarName, _options, cmd) => {\n    const ctx = oneoffContext;\n    await ensureHasConvexDependency(ctx, \"env get\");\n    const options = cmd.optsWithGlobals();\n    const deploymentSelection = deploymentSelectionFromOptions(options);\n    const { adminKey, url } =\n      await fetchDeploymentCredentialsWithinCurrentProject(\n        oneoffContext,\n        deploymentSelection\n      );\n\n    const envVar = await runQuery(\n      oneoffContext,\n      url,\n      adminKey,\n      \"_system/cli/queryEnvironmentVariables:get\",\n      { name: envVarName }\n    );\n    if (envVar === null) {\n      logFailure(\n        oneoffContext,\n        `Environment variable \"${envVarName}\" not found.`\n      );\n      return;\n    }\n    type EnvVar = {\n      name: string;\n      value: string;\n    };\n    const { name, value } = envVar as EnvVar;\n    logMessage(oneoffContext, `${name}=${value}`);\n  });\n\nconst envRemove = new Command(\"remove\")\n  .alias(\"rm\")\n  .arguments(\"<name>\")\n  .configureHelp({ showGlobalOptions: true })\n  .action(async (name, _options, cmd) => {\n    const options = cmd.optsWithGlobals();\n    await ensureHasConvexDependency(oneoffContext, \"env remove\");\n    await callUpdateEnvironmentVariables(options, [{ name }]);\n    logMessage(oneoffContext, chalk.green(`Successfully unset ${name}`));\n  });\n\nconst envList = new Command(\"list\")\n  .configureHelp({ showGlobalOptions: true })\n  .action(async (_options, cmd) => {\n    const ctx = oneoffContext;\n    await ensureHasConvexDependency(ctx, \"env list\");\n    const options = cmd.optsWithGlobals();\n    const deploymentSelection = deploymentSelectionFromOptions(options);\n    const { adminKey, url } =\n      await fetchDeploymentCredentialsWithinCurrentProject(\n        oneoffContext,\n        deploymentSelection\n      );\n\n    type EnvVar = {\n      name: string;\n      value: string;\n    };\n    const envs = (await runQuery(\n      oneoffContext,\n      url,\n      adminKey,\n      \"_system/cli/queryEnvironmentVariables\",\n      {}\n    )) as EnvVar[];\n    for (const { name, value } of envs) {\n      logMessage(oneoffContext, `${name}=${value}`);\n    }\n  });\n\ntype EnvVarChange = {\n  name: string;\n  value?: string;\n};\n\nasync function callUpdateEnvironmentVariables(\n  options: DeploymentSelectionOptions,\n  changes: EnvVarChange[]\n) {\n  const deploymentSelection = deploymentSelectionFromOptions(options);\n  const { adminKey, url } =\n    await fetchDeploymentCredentialsWithinCurrentProject(\n      oneoffContext,\n      deploymentSelection\n    );\n  const client = deploymentClient(url);\n  const headers = {\n    Authorization: `Convex ${adminKey}`,\n    \"Convex-Client\": `npm-cli-${version}`,\n  };\n  await client.post(\n    \"/api/update_environment_variables\",\n    { changes },\n    {\n      headers,\n    }\n  );\n}\n\nexport const env = new DeploymentCommand(\"env\")\n  .summary(\"Set and view environment variables\")\n  .description(\n    \"Set and view environment variables on your deployment\\n\\n\" +\n      \"  Set a variable: `npx convex env set name value`\\n\" +\n      \"  Unset a variable: `npx convex env remove name`\\n\" +\n      \"  List all variables: `npx convex env list`\\n\" +\n      \"  Print a variable's value: `npx convex env get name`\\n\\n\" +\n      \"By default, this sets and views variables on your dev deployment.\"\n  )\n  .addDeploymentSelectionOptions(\"Set and view environment variables on\")\n  .addCommand(envSet)\n  .addCommand(envGet)\n  .addCommand(envRemove)\n  .addCommand(envList);\n"],
  "mappings": "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",
  "names": []
}
